<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Insert description here
// Get all input selectors
for (var i = 0; i &lt; instance_number(obj_input_selector); i++) {
   input_selectors[i] = instance_find(obj_input_selector, i);
}

// Slot -2: none, -1:keyboard, 0 - inf.:controller
empty_input = -2;
keyboard_input = -1;
input_slots[0] = empty_input;
input_slots[1] = empty_input;
input_slots[2] = empty_input;
input_slots[3] = empty_input;

global.num_players = 0;
global.num_controller_players = 0;
global.num_keyboard_players = 0;


// Getting all input options
show_debug_message("Checking for inputs...");
var gp_num = gamepad_get_device_count();
show_debug_message(gp_num);
var gp_num_connected = 0;
for (var i = 0; i &lt; gp_num; i++;) {
    if gamepad_is_connected(i) global.gp[i] = true else global.gp[i] = false;
    if global.gp[i] {
        gp_num_connected++;
        show_debug_message("Gamepad " + string(i) + " is connected.");
    } else {
        show_debug_message("Gamepad " + string(i) + " is not connected.");
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if keyboard_check_pressed(vk_enter) {
    // Get next available slot
    var control_index = find_next_control(input_slots);
    if (!is_control_in_list(input_slots, keyboard_input) &amp;&amp; control_index &gt;= 0) {
        input_slots[control_index] = keyboard_input;
        gui_id = input_selectors[control_index];
        gui_id.is_keyboard = true;
    } 
}

var gp_num = gamepad_get_device_count();
for (gp_id = 0; gp_id &lt; gp_num; gp_id++) {
    if gamepad_is_connected(gp_id) {
        if gamepad_button_check_pressed(gp_id , gp_start) {
            // Get next available slot
            var control_index = find_next_control(input_slots);
            if (!is_control_in_list(input_slots, gp_id) &amp;&amp; control_index &gt;= 0) {
                input_slots[control_index] = gp_id;
                gui_id = input_selectors[control_index];
                gui_id.is_gamepad = true;
                gui_id.gamepad_id = gp_id;
            }
        } else if gamepad_button_check_pressed(gp_id , gp_select) {
            // Find gamepad in array
            for (control_index = 0; 
                control_index &lt; array_length_1d(input_slots);  control_index++) {
                if (input_slots[control_index] == gp_id) {
                    input_slots[control_index] = empty_input;
                    gui_id = input_selectors[control_index];
                    gui_id.is_gamepad = false;
                }
            }
        }
    }
}

// Check for back buttons
if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape)) {
    // Check which slot is the keyboard
    for (control_index = 0; control_index &lt; array_length_1d(input_slots); 
         control_index++) {
        if (input_slots[control_index] == keyboard_input) {
            input_slots[control_index] = empty_input;
            var gui_id = input_selectors[control_index];
            gui_id.is_keyboard = false;
        }
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
