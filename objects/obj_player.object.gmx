<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Startup values
is_hurt = false;
should_slow = false;
punish_duration = room_speed * 2;

h_speed = 0.0;
v_speed = 0.0;

max_speed = 5.0;
run_max_speed = 10.0;

drag = 0.35;
acceleration = 0.5;
run_acceleration = 2.0;

grav = 0.7;

jump_speed = 12.0;
wall_jump_h = 10.0;
wall_jump_v = 12.0;

wall_stick = false;
wall_stick_duration = 6;
wall_stick_counter = 0;

// Input
left_pressed = 0;
right_pressed = 0;
jump_pressed = 0;
run_pressed = 0;

controller_id = -2;
key_left = 0;
key_right = 0;
key_jump = 0;
key_run = 0;
key_alt_left = 0;
key_alt_right = 0;
key_alt_jump = 0;
key_alt_run = 0;

// Score and Upgrades
money = 0;

room_time = 0;
cumulative_time = 0;
global.shake = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset should_slow
should_slow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset is_hurt
is_hurt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update code
// Debug code, lets you place the players at will.
//if mouse_button = mb_left {
//    x = median(64, mouse_x, room_width - 64);
//    y = median(64, mouse_y, room_height - 64);
//}

//for shaker 
view_xview = 0; 
view_yview = 0; 

view_xview += random_range(-global.shake, global.shake);
view_yview += random_range(-global.shake, global.shake); 
global.shake *= 0.93; 

if (controller_id == -1) {
    left_pressed = keyboard_check(key_left) || keyboard_check(key_alt_left);
    right_pressed = keyboard_check(key_right) || keyboard_check(key_alt_right);
    jump_pressed = keyboard_check_pressed(key_jump) || keyboard_check_pressed(key_alt_jump);
    run_pressed = keyboard_check(key_run) || keyboard_check(key_alt_run);
} else if controller_id &gt;= 0 {
    // Analog
    var x_axis = gamepad_axis_value(controller_id, gp_axislh);

    left_pressed = gamepad_button_check(controller_id, key_left) || (x_axis &lt; -0.3);
    right_pressed = gamepad_button_check(controller_id, key_right) || (x_axis &gt; 0.3);
    jump_pressed = gamepad_button_check_pressed(controller_id, key_jump);
    run_pressed = gamepad_button_check(controller_id, key_run) || 
                    gamepad_button_check(controller_id, gp_shoulderrb);
}

// Exit the input / movement on hurting
if is_hurt {
    exit;
};

var has_jumped = false;

// Check if we should stick to the wall
var ax = 0.0;
var ay = 0.0;
if left_pressed {
    if run_pressed {
        ax -= run_acceleration;
    } else {
        ax -= acceleration;
    }
} else if right_pressed {
    if run_pressed {
        ax += run_acceleration;
    } else {
        ax += acceleration;
    }
}

// Exiting the wall stick
if !wall_stick &amp;&amp; !place_meeting(x, y + 1, obj_block) &amp;&amp; 
    ((right_pressed &amp;&amp; place_meeting(x - 1, y, obj_block)) || 
    (left_pressed &amp;&amp; place_meeting(x + 1, y, obj_block))) 
{
    wall_stick_counter = wall_stick_duration;
    wall_stick = true;
} 

if jump_pressed &amp;&amp; !has_jumped {
    has_jumped = true;
    if place_meeting(x, y + 1, obj_block) {
        ay = -jump_speed;
        audio_play_sound(snd_jump, 1, 0);
    } else {
        if place_meeting(x + 1, y, obj_block) &amp;&amp; left_pressed {
            ay -= wall_jump_v;
            ax -= wall_jump_h;
            wall_stick = false;
            wall_stick_counter = 0;
            audio_play_sound(snd_jump, 1, 0);
        } else if place_meeting(x - 1, y, obj_block) &amp;&amp; right_pressed {
            ay-= wall_jump_v;
            ax += wall_jump_h;
            wall_stick = false;
            wall_stick_counter = 0;
            audio_play_sound(snd_jump, 1, 0);
        }
    }
}

if !place_meeting(x, y + 1, obj_block) {
    if place_meeting(x + 1, y, obj_block) || 
        place_meeting(x - 1, y, obj_block) {
        ay += grav/2;
    } else {
        ay += grav;
    }
} else {
    // Exit the wall stick after we landed
    wall_stick_counter = 0;
    wall_stick = false;
}

h_speed += ax;
v_speed += ay;

// Cap speed
if key_run {
    h_speed = sign(h_speed) * min(abs(h_speed), run_max_speed);
} else {
    h_speed = sign(h_speed) * min(abs(h_speed), max_speed);
}
// Decrease speed when hit by spikes
if should_slow {
    h_speed = sign(h_speed) * min(abs(h_speed), max_speed / 2);
}

// Updating
var dy = round(v_speed);
repeat(abs(dy)) {
    if !place_meeting(x, y + sign(dy), obj_block) {
        y += sign(dy);
    } else { 
        v_speed = 0;
        break;
    }
}

var dx = round(h_speed);
if wall_stick_counter &lt;= 0 {
    repeat(abs(dx)) {
        if (place_meeting(x + sign(dx), y, obj_block) &amp;&amp; 
            !place_meeting(x + sign(dx), y - 1, obj_block))
            --y;
        if (!place_meeting(x + sign(dx), y, obj_block) &amp;&amp; 
            !place_meeting(x + sign(dx), y + 1, obj_block) &amp;&amp; 
            place_meeting(x + sign(dx), y + 2, obj_block))
            ++y;
        if !place_meeting(x + sign(dx), y, obj_block) {
            x += sign(dx);
        } else {
            h_speed = 0;
            break;
        }
    }
}

if wall_stick_counter &gt; 0 {
    wall_stick_counter--;
} else {
    wall_stick = false;
}

if !left_pressed &amp;&amp; !right_pressed {
    h_speed -= h_speed * drag;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !is_hurt {
    is_hurt = true;
    alarm[0] = punish_duration;
    global.shake = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset player to start position
room_time = 0;
if instance_exists(obj_start) {
    x = obj_start.x;
    y = obj_start.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player with correct color and orientation
var x_pos = x;
var y_pos = y;
// Jiggle player on hit
if (is_hurt) {
    x_pos = x + random_range(-1, 1);
    y_pos = y + random_range(-1, 1);
}
var alpha = 1;
if (should_slow) {
    if delta_time % 4 {
        alpha = !alpha;
    }
}
if abs(h_speed) &gt; 0
    draw_sprite_ext(spr_player, 0, x_pos, y_pos, sign(h_speed) , 1, 0, playercolour, alpha);
else {
    draw_sprite_ext(spr_player, 0, x_pos, y_pos, 1, 1, 0, playercolour, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
